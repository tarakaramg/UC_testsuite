(* enc.ml *)

open Test

let verbose = ref false
let debug = ref false
let quiet = ref false
let create = ref false
let dirs_list = ref []
                                  
          
let check_dirs anon =
  let _ = print_string "we are at check_dirs \n" in
  if (List.length !dirs_list <> 0) then
   ( print_string ("Too many arguments \"" ^ anon ^ "\" is unexpected \n"); exit 1)
  else
    (*print_string ("we are are else " ^ anon ^ "\n");*) dirs_list := ((!dirs_list) @ [anon])

let make_dir file folder =
  try Unix.mkdir folder 754
            with
            |Unix.Unix_error (e,_,_) -> (print_endline (Unix.error_message e); exit 1))
                  
  
let make_dir file =
  let folder = String.sub file 0 (String.length file -3) in
  let (b: bool)  = 
    try
      Sys.is_directory folder(*; print_endline ("we are in try " ^ string_of_bool b)*)
    with
    |Sys_error e -> (let _ = print_endline e in false )
      in
      if (b) then (print_endline (string_of_bool b);print_string (folder ^ " already exists, I cannot work with leftover files") ;
                                   exit 1)
      else make_dir file folder
 
let pre_walk dir =
  let _ =  print_endline "we are at pre_walk \n" in
  let rec one_file filelist =
    match filelist with
    |[] -> ()
    |e::l -> let _ = make_dir e in one_file l
                                 in one_file (walk_directory_tree dir ".*uc$")
   
let pre_create dir =
  try
    let _ = Sys.is_directory(dir) in pre_walk dir
  with
  |Sys_error e -> try
                  let _ = Sys.is_directory("./"^dir) in pre_walk dir
                with
                |Sys_error e -> (print_string (dir^" is not a valid directory \n"); exit 1)
  

let pre_crawl dir =
  try
    let _ = Sys.is_directory(dir) in walk dir ".*test$"
  with
  |Sys_error e -> try
                  let _ = Sys.is_directory("./"^dir) in walk dir ".*test$"
                with
                |Sys_error e -> (print_string (dir^" is not a valid directory \n"); exit 1)


                              
let call_dir_test dir_list_local = 
    if (List.length dir_list_local <> 1) then
      (print_int (List.length dir_list_local); List.iter print_string dir_list_local; print_string "No directory given \n"; exit 1)
    else if (!create) then
      (print_endline "We are going to pre_create"; pre_create (List.nth dir_list_local 0))
    else
      (pre_crawl (List.nth dir_list_local 0); ())
  
  
let main =
begin
let speclist = [("-verbose", Arg.Set verbose, "Enables verbose mode");
("-debug", Arg.Set debug, "Prints debug information");
("-quiet", Arg.Set quiet, "Quiet mode");
("-create", Arg.Set create, "Create TEST files mode");
               ]
in
let usage_msg = "Available options:"  in
   Arg.parse speclist (fun anon -> check_dirs anon) usage_msg;
   call_dir_test !dirs_list;
   print_endline ("Verbose mode: " ^ string_of_bool !verbose);
   print_endline ("Quiet: " ^ string_of_bool !verbose);
   print_endline ("Debug: " ^ string_of_bool !debug);
   print_endline ("Create: " ^ string_of_bool !create);
   List.iter print_string !dirs_list; print_string "\n"
end

let () = main
