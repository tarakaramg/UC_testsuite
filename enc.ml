(* enc.ml *)

open Test
open Test_main
   

let verbose = ref false
let debug = ref false
let quiet = ref false
let create = ref false
let dirs_list = ref []
                                  
          
let check_dirs anon =
  let _ = print_string "we are at check_dirs \n" in
  if (List.length !dirs_list <> 0) then
   ( print_string ("Too many arguments \"" ^ anon ^ "\" is unexpected \n"); exit 1)
  else
    (*print_string ("we are are else " ^ anon ^ "\n");*) dirs_list := ((!dirs_list) @ [anon])

let create_test (folder:string) (file:string) =
  let file_a = Array.append [| ""|][|file|] in 
  let (stat, s_out, s_err) = run file_a in
  let desc = "description (* This file was generated by uc-dsl test suite *) \n . \n" in
  let args = ("args:" ^ file) in
  let file_outcome =
    match stat with
    |None -> "unknown"
    |Some 0 -> "success"
    |Some n -> "failure" in
  let o_come =
    if (s_err = "") then (
      ("outcome: (*outcome autogenerated please verify *) " ^ file_outcome ^"\n"^s_err ^"\n.\n"))
    else
      ("(* Warning: std out is not empty, correct this *) \n"^"outcome: (*outcome autogenerated please verify *) " ^ file_outcome ^"\n"^s_err ^"\n.\n") in
  let _ =
  (* Write message to file *)
  let oc = open_out (folder^"/TEST") in    (* create or truncate file, return channel *)
  Printf.fprintf oc "%s" (desc^args^"\n"^o_come);   (* write something *)   
  close_out oc;
  in ()
  
                                                                        
  
let create_dir file folder =
  let _ =
    try Unix.mkdir folder 0o755
    with
    |Unix.Unix_error (e,_,_) -> (print_endline (Unix.error_message e); exit 1)
  in
  let _ =
    let ic = Str.split (Str.regexp "/") file in
    let file_to_write  = folder^"/"^(List.nth ic ((List.length ic)-1)) in
    let _ = try
        Sys.command ("cp "^ file ^" "^  file_to_write)
      with
      |Sys_error e -> (print_endline e; exit 1) in
    create_test folder file_to_write in
  ()

let make_dir file =
  let folder = String.sub file 0 (String.length file -3) in
  let (b: bool)  = 
    try
      Sys.is_directory folder(*; print_endline ("we are in try " ^ string_of_bool b)*)
    with
    |Sys_error e -> (let _ = print_endline e in false )
      in
      if (b) then (
        print_string (folder ^ " already exists, I cannot work with leftover files \n") ;
                                   exit 1)
      else create_dir file folder
      
let pre_walk dir =
  let _ =  print_endline ("we are at pre_walk"^dir^" \n") in
  let rec one_file filelist =
    match filelist with
    |[] -> (print_endline "list is empty"; exit 1)
    |e::l -> let _ = (* print_endline "we are at one_file" ;*)  make_dir e in one_file l
  in
  try
    one_file ( walk_directory_tree dir ".*uc$")
  with
  |Sys_error e -> print_endline e; exit 1
   
let pre_create dir =
  try
    let _ = Sys.is_directory(dir) in pre_walk dir
  with
  |Sys_error e -> try
                  let _ = Sys.is_directory ("./"^dir) in pre_walk ("./"^dir)
                with
                |Sys_error e -> (print_endline e;print_string (dir^" is not a valid directory \n"); exit 1)
  

let pre_crawl dir =
  try
    let _ = Sys.is_directory(dir) in walk dir ".*test$"
  with
  |Sys_error e -> try
                  let _ = Sys.is_directory("./"^dir) in walk dir ".*test$"
                with
                |Sys_error e -> (print_endline e; print_string (dir^" is not a valid directory \n"); exit 1)


                              
let call_dir_test dir_list_local = 
    if (List.length dir_list_local <> 1) then
      (print_int (List.length dir_list_local); List.iter print_string dir_list_local; print_string "No directory given \n"; exit 1)
    else if (!create) then
      (print_endline "We are going to pre_create"; pre_create (List.nth dir_list_local 0))
    else
      (pre_crawl (List.nth dir_list_local 0); ())
  
  
let main =
begin
let speclist = [("-verbose", Arg.Set verbose, "Enables verbose mode");
("-debug", Arg.Set debug, "Prints debug information");
("-quiet", Arg.Set quiet, "Quiet mode");
("-create", Arg.Set create, "Create TEST files mode");
               ]
in
let usage_msg = "Available options:"  in
   Arg.parse speclist (fun anon -> check_dirs anon) usage_msg;
   call_dir_test !dirs_list;
   print_endline ("Verbose mode: " ^ string_of_bool !verbose);
   print_endline ("Quiet: " ^ string_of_bool !verbose);
   print_endline ("Debug: " ^ string_of_bool !debug);
   print_endline ("Create: " ^ string_of_bool !create);
   List.iter print_string !dirs_list; print_string "\n"
end

let () = main
