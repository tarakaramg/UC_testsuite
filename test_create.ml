(*test_create.ml *)
open Test_main
   

let create_test (folder:string) (file:string) log_file =
  let file_a = Array.append [|" "|] [|file|] in 
  let (stat, s_out, s_err) = run folder file_a in
  let desc = "description (* This file was generated by uc-dsl test suite. Dependent files may not be copied into this directory *) \n.\n" in
  let args = ("args: " ^ file) in
  let file_outcome =
    match stat with
    |Some 0 -> "success"
    |None -> "unknown"
    |Some n -> "failure" in
  let o_come =
    if (s_out = "") then (
      ("outcome: (*outcome autogenerated please verify for accuracy*) " ^ file_outcome ^"\n"^s_err ^"\n.\n"))
    else
      ("(* ***** Warning: std out is not empty ***** *)\n" ^"(* std out:"^s_out^"*)" ^"outcome: (*outcome autogenerated please verify *) " ^ file_outcome ^"\n"^s_err ^"\n.\n") in
  let _ =
    (* Write message to file *)
    let oc = open_out (folder^"/TEST") in    (* create or truncate file, return channel *)
    Printf.fprintf oc "%s" (desc^args^"\n"^o_come);   (* write something *)   
    close_out oc;
  in
  let str = folder^"/TEST created with \n"^args^"\t "^file_outcome^"\n"
    in write_log log_file str; print_endline str
      
let create_dir file folder log_file =
  let _ =
    try Unix.mkdir folder 0o755
    with
    |Unix.Unix_error (e,_,_) -> (let str = Unix.error_message e
                                 in write_log log_file str;
                                    print_endline str)
  in
    let ic = Str.split (Str.regexp "/") file in
    let file_to_write  = List.nth ic ((List.length ic)-1) in
    let str =
      try
        let _ = Sys.command ("cp "^ file ^" "^folder^"/"^  file_to_write)
        in file^" copied to "^folder
      with
      |Sys_error e -> e
    in
    let _ = write_log log_file str; print_endline str in
    create_test folder file_to_write log_file

let make_dir file log_file =
  let folder = String.sub file 0 (String.length file -3) in
  let (b: bool)  = 
    try
      Sys.is_directory folder
    with
    |Sys_error e ->  false
  in
  if (b) then (
    let str = "abort: " ^ folder ^ " already exists, I cannot work with leftover files \n"
    in write_log log_file str;
       print_endline str;
       exit 1)
  else create_dir file folder log_file
  
let pre_walk dir log_file =
  let rec one_file filelist str =
    match filelist with
    |[] -> if str = "" then
             (print_endline "\n Success"; exit 0)
           else
             (print_endline "\n Completed with the following issues"; print_endline str; exit 1)
    |e::l -> let _ =  make_dir e log_file in one_file l str
  in
  try
    let (file_list, str) =  walk_directory_tree dir ".*uc$" in
    if List.length file_list = 0 then
      (print_endline "list is empty"; print_endline str; exit 1)
    else one_file file_list str
  with
  |Sys_error e -> print_endline e; exit 1
                  
let pre_create dir log_file  =
  try
    let _ = Sys.is_directory(dir) in pre_walk dir log_file
  with
  |Sys_error e -> try
                  let _ = Sys.is_directory ("./"^dir) in pre_walk ("./"^dir) log_file
                with
                |Sys_error e -> (print_endline e;print_string (dir^" is not a valid directory \n"); exit 1)
